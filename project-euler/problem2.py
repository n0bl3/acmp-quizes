import timeit

#-------------------------------------------------------------------------------
# Each new term in the Fibonacci sequence is generated by adding the previous two
# terms. By starting with 1 and 2, the first 10 terms will be:
# 
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# 
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Fibonacci number calculation with memoization
memo = {0:0, 1:1}

def fibonacci_memo(n):
   if not n in memo:
      memo[n] = fibonacci_memo(n-1) + fibonacci_memo(n-2)
   return memo[n]

#-------------------------------------------------------------------------------
# Iterative fibonacci number calculation 
def fibonacci_iterative(n):
   a, b = 0, 1
   for i in range(n):
      a, b = b, a+b
   return a

def problem2_solver():
   MAX_FIB_VALUE = 4000000
   sum = 0
   
   for i in range(1, 10000):
      x = fibonacci_memo(i)

      print i, x
      
      if x > MAX_FIB_VALUE:
         break;
      
      if not(x%2):
         sum += x

   print "Sum =", sum

#-------------------------------------------------------------------------------
# Wrapper to measure time required for fibonacci calculations
def main1():
   t = timeit.Timer(
      problem2_solver
   )

   print "%.2f usec/pass" % (1000000 * t.timeit(number = 10)/10)

#-------------------------------------------------------------------------------
# Main function
def main():
   problem2_solver()

main()
